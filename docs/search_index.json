[
["index.html", "Glossary Overview", " Glossary psyTeachR Team 2019-03-21 Overview I hope this glossary is useful! "],
["a.html", "A argument", " A argument A variable that provides input to a function. For example, the first argument to the function rnorm() is n (the number of observations). "],
["b.html", "B", " B "],
["c.html", "C character chunk comment concatenate", " C character A data type representing strings of text. Examples of character data are: &quot;I am a string of characters&quot; paste(&quot;The answer is &quot;, 6+6) as.character(100) ## [1] &quot;I am a string of characters&quot; ## [1] &quot;The answer is 12&quot; ## [1] &quot;100&quot; chunk In an RMarkdown file (.Rmd), you can include a block (or &quot;chunk&quot;) of R code by surrounding the code as in the example below: ```{r chunk-name} mean_age &lt;- mean(ages) %&gt;% round(2) ``` comment You can annotate .R files or chunks in .Rmd files with comments by prefacing each line of the coment with one or more hash symbols (#). # I&#39;m demonstrating comments in this chunk # This comment will be added to the document outline ---- Comments get added to the document outline if you put four or more dashes, equal signs, or hashes at the end. This is a great way to keep track of more complicated scripts. concatenate When referring to strings, concatenate means to paste them together using the function paste (adds a space between strings) or paste0 (doesn't add anything between strings). subject_name &lt;- &quot;Lisa&quot; paste(&quot;Hello,&quot;, subject_name) ## [1] &quot;Hello, Lisa&quot; When referring to other types of variables, concatenate can mean to create a vector with those variables, usually using the c function. For example, you could concatenate the numbers 1, 3, 6, and 10 like this: c(1, 3, 6, 10). You can concatenate two vectors as well: v1 &lt;- 1:5 v2 &lt;- 11:15 c(v1, v2) ## [1] 1 2 3 4 5 11 12 13 14 15 Remember, a vector can only have one data type. So if you concatenate a string vector and a numeric vector, the numbers will get turned into their string versions. If you concatenate an integer and a double vector, the integers will be converted to doubles. strings &lt;- c(&quot;a&quot;, &quot;c&quot;, &quot;e&quot;) integers &lt;- c(1L, 3L, 5L) doubles &lt;- c(1.1, 3.3, 5.5) c(strings, integers) c(doubles, integers) ## [1] &quot;a&quot; &quot;c&quot; &quot;e&quot; &quot;1&quot; &quot;3&quot; &quot;5&quot; ## [1] 1.1 3.3 5.5 1.0 3.0 5.0 "],
["d.html", "D data type double", " D data type integer (whole numbers like 1L, -10L, 3000L) double (numbers like -0.223, 10.324, 1e4) character (letters or words like &quot;I love R&quot;) logical (TRUE or FALSE) If you want to know what data type a variable is, use the function typeof. typeof(10) ## [1] &quot;double&quot; typeof(&quot;10&quot;) ## [1] &quot;character&quot; typeof(10L) ## [1] &quot;integer&quot; typeof(10 == 10) ## [1] &quot;logical&quot; double Doubles are a data type representing any type of number. Examples of doubles are 1, 1.0, -0.01, or 1e4. "],
["e.html", "E element", " E element An element is one item in a vector. For example, the built-in vector LETTERS contains 26 elements: the uppercase latin letters A through Z. You can select an element from a vector by putting its index in square brackets. # get the tenth upppercase letter LETTERS[10] ## [1] &quot;J&quot; "],
["f.html", "F function", " F function A named section of code that can be reused. For example, sd is a function that returns the standard deviation of the vector of numbers that you provide as the input argument. Functions are set up like this: function_name(argument1 = a1, argument2 = a2). The arguments in parentheses can be named (like, x = c(1,3,5,8)) or you can skip the names if you put them in the exact same order that they're defined in the function. You can check this by typing ?sd (or whatever function name you're looking up) into the console and the Help pane will show you the default order under Usage. Figure 1: Function help "],
["g.html", "G", " G "],
["h.html", "H", " H "],
["i.html", "I index integer", " I index The number that represents an element's location in a vector. For example, the index of the letter E in the vector LETTERS is 5. integer Integers are a data type representing whole numbers. In R, you specify that a number is an integer by adding an L at the end, like 1L, -36L, or 100L. "],
["j.html", "J", " J "],
["k.html", "K", " K "],
["l.html", "L", " L "],
["m.html", "M", " M "],
["g-1.html", "G numeric", " G numeric The integer and double data types are numeric. "],
["o.html", "O", " O "],
["p.html", "P package panes", " P package Many useful functions are built into R and available by default whenever you start it up. But some of the most powerful things you can do with R require packages of functions that are written by the community. The functions in these packages aren't available until you install the package (using install.packages(&quot;package_name&quot;) or clicking Install on the Packages pane; this only needs to be done if the package isn't already installed). Once that package is installed (kind of like downloading an app to your phone), you can use it in any script by loading that package as a library at the top of your script (e.g., (library(ggplot2)). You can alternatively type the package name and two colons before any function from that package to use it without loading all of its functions into the library (e.g., ggplot2::geom_histogram()). This sort of notation is also used to disambiguate function names if two packages have functions with the same names. panes RStudio is arranged with four window &quot;panes&quot;. By default, the upper left pane is the source pane, where you view and edit source code from files. The bottom left pane is usually the console pane, where you can type in commands and view output messages You can change the location of panes and what tabs are shown under Preferences &gt; Pane Layout. Figure 2: Pane layout "],
["q.html", "Q", " Q "],
["r.html", "R", " R "],
["s.html", "S string", " S string A piece of text inside of quotes. For example, &quot;I sense the rains down in Africa&quot; is a string. Numbers inside of quotes can be a string; &quot;19&quot; is a string, while 19 is not. Strings are a character data type. "],
["t.html", "T", " T "],
["u.html", "U", " U "],
["v.html", "V vector", " V vector This is a type of data structure that is basically a list of things like T/F values, numbers, or strings. It can get very complicated (see Ch 20 of R for Data Science for a thorough explanation), but at first you just need to be able to understand that the following things are examples of vectors: # use the c() function to make a vector of strings or numbers liit_ingredients &lt;- c(&quot;vodka&quot;, &quot;gin&quot;, &quot;rum&quot;, &quot;tequila&quot;, &quot;triple sec&quot;, &quot;orange juice&quot;, &quot;coke&quot;, &quot;sour mix&quot;) fun_to_play_at &lt;- c(25, 13, 3, 1) # the colon between two integers gives you all the numbers from the first to the last integer likert &lt;- 1:7 The variable letters is a built-in vector with the latin letters in order. You can select part of a vector by putting the numeric location of what element you want inside of square brackets after the vector. You can even put a vector of numbers inside the square brackets to select several elements. letters[26] letters[1:5] letters[fun_to_play_at] ## [1] &quot;z&quot; ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; ## [1] &quot;y&quot; &quot;m&quot; &quot;c&quot; &quot;a&quot; "],
["w.html", "W widget", " W widget A interactive web element, like a dropdown menu or a slider. See a great overview of widgets at the RStudio Shiny tutorial. In shiny apps, a widget is created by its function. The first argument is the name you will use in the code for referring to that widget and its value, so make sure it's a unique, descriptive name like plot_color or group1_label. The second argument is the label, which is a string like &quot;Plot colour&quot; or &quot;Label for the first group&quot; (it can also be an empty string like &quot;&quot;). "],
["x.html", "X", " X "],
["y.html", "Y", " Y "],
["z.html", "Z", " Z "]
]
